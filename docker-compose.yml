services:
  web:
    build: .
    container_name: django_web
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - mongo
    env_file:
      - .env
    networks:
      - backend

  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    networks:
      - backend

  mongo:
    image: mongo:6-jammy
    container_name: mongo_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  celery:
    build: .
    container_name: celery_worker
    command: celery -A config worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
      - postgres
      - mongo
    env_file:
      - .env
    networks:
      - backend


  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - backend



  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    depends_on:
      - web
      - frontend
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static
      - ./media:/app/media
      - ./frontend/dist:/usr/share/nginx/html
    ports:
      - "80:80"
    networks:
      - backend




volumes:
  postgres_data:
  mongo_data:

networks:
  backend:
    driver: bridge
